{"version":3,"sources":["components/Grid/index.js","components/Card.js","components/Counter.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Container","_ref","fluid","children","react_default","a","createElement","className","concat","Row","_ref2","Col","_ref3","size","split","map","join","Card","props","shake","data-id","id","onClick","checkIfClicked","alt","name","src","image","Counter","count","topCount","Nav","components_Counter","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","bind","assertThisInitialized","clickedCard","filter","character","charsCopy","slice","sort","b","Math","random","clicked","resetChars","char","setState","findIndex","_this2","components_Nav","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEO,SAASA,EAATC,GAAwC,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,SAC/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,OAAcN,EAAQ,SAAW,KAAOC,GAG1D,SAASM,EAATC,GAAkC,IAAnBR,EAAmBQ,EAAnBR,MAAOC,EAAYO,EAAZP,SACzB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAC,OAAQN,EAAQ,SAAW,KAAOC,GAGpD,SAASQ,EAATC,GAAiC,IAAlBC,EAAkBD,EAAlBC,KAAMV,EAAYS,EAAZT,SACxB,OACIC,EAAAC,EAAAC,cAAA,OACIC,UAAWM,EACNC,MAAM,KACNC,IAAI,SAAAF,GAAI,MAAI,OAASA,IACrBG,KAAK,MAETb,GCPEc,MARf,SAAcC,GACV,OACId,EAAAC,EAAAC,cAACK,EAAD,CAAKE,KAAK,QACNT,EAAAC,EAAAC,cAAA,UAAQC,UAAWW,EAAMC,MAAQ,mCAAqC,oBAAsBC,UAASF,EAAMG,GAAIC,QAAS,kBAAMJ,EAAMK,eAAeL,EAAMG,MAAKjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBiB,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,WCE5NC,MANf,SAAiBV,GACT,OACId,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,UAAoCW,EAAMW,MAA1C,iBAA+DX,EAAMY,WCelEC,MAff,SAAab,GACT,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACPH,EAAAC,EAAAC,cAACK,EAAD,CAAKE,KAAK,QACNT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,iBAEJH,EAAAC,EAAAC,cAACK,EAAD,CAAKE,KAAK,QACNT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAaH,EAAAC,EAAAC,cAAC0B,EAAD,CAASF,SAAUZ,EAAMY,SAAUD,MAAOX,EAAMW,UAEnFzB,EAAAC,EAAAC,cAACK,EAAD,CAAKE,KAAK,kBCwDXoB,qBA5Db,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KACDuB,MAAQ,CACXC,WAAYA,EACZb,MAAO,EACPC,SAAU,GAEZI,EAAKX,eAAiBW,EAAKX,eAAeoB,KAApBR,OAAAS,EAAA,EAAAT,CAAAD,IAPLA,8EAWJb,GACb,IAAIwB,EAAcR,KAAKI,MAAMC,WAAWI,OAAO,SAAAC,GAAS,OAAIA,EAAU1B,KAAOA,IAAI,GAC7E2B,EAAaX,KAAKI,MAAMC,WAAWO,QAAQC,KAAK,SAAS7C,EAAG8C,GAAG,MAAO,GAAMC,KAAKC,WACrF,GAAKR,EAAYS,QASV,CACL,IAAIC,EAAalB,KAAKI,MAAMC,WAAW3B,IAAI,SAAAyC,GACzC,MAAO,CACLnC,GAAImC,EAAKnC,GACTM,MAAO6B,EAAK7B,MACZ2B,SAAS,KAGbjB,KAAKoB,SAAS,CACZf,WAAYa,EACZ1B,MAAO,SAlBTgB,EAAYS,SAAU,EACtBN,EAAUA,EAAUU,UAAU,SAAAF,GAAI,OAAIA,EAAKnC,KAAOA,KAAOwB,EAEzDR,KAAKoB,SAAS,CACZf,WAAYM,EACZnB,MAAOQ,KAAKI,MAAMZ,MAAQ,EAC1BC,SAAWO,KAAKI,MAAMZ,MAAQ,EAAIQ,KAAKI,MAAMX,SAAWO,KAAKI,MAAMZ,MAAQ,EAAIQ,KAAKI,MAAMX,4CAiBvF,IAAA6B,EAAAtB,KACP,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsD,EAAD,CAAK/B,MAAOQ,KAAKI,MAAMZ,MAAOC,SAAUO,KAAKI,MAAMX,WACnD1B,EAAAC,EAAAC,cAACN,EAAD,KACEI,EAAAC,EAAAC,cAACG,EAAD,KACG4B,KAAKI,MAAMC,WAAW3B,IAAI,SAAAgC,GAAS,OAClC3C,EAAAC,EAAAC,cAACuD,EAAD,CACEtC,eAAgBoC,EAAKpC,eACrBF,GAAI0B,EAAU1B,GACdyC,IAAKf,EAAU1B,GACfI,KAAMsB,EAAUtB,KAChBE,MAAOoB,EAAUpB,oBAnDfoC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e33c919.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function Container({ fluid, children }) {\r\n    return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\r\n}\r\n\r\nexport function Row({ fluid, children }) {\r\n    return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\r\n}\r\n\r\nexport function Col({ size, children }) {\r\n    return (\r\n        <div\r\n            className={size\r\n                .split(\" \")\r\n                .map(size => \"col-\" + size)\r\n                .join(\" \")}\r\n        >\r\n            {children}        \r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Col } from \"./Grid\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <Col size=\"md-3\">\r\n            <button className={props.shake ? \"btn p-2 card-size animated shake\" : \"btn p-2 card-size\"}  data-id={props.id} onClick={() => props.checkIfClicked(props.id)}><img className=\"mt-1 center-cropped\" alt={props.name} src={props.image}></img></button>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Counter(props) {\r\n        return (\r\n            <h3 className=\"float-right\">Score: {props.count} | Top Score: {props.topCount}</h3>\r\n        )\r\n    }\r\n\r\nexport default Counter;","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport { Col } from \"./Grid\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-light blue lighten-4 row\">\r\n                <Col size=\"md-4\">\r\n                    <span className=\"navbar-brand\">Play Memory!</span>\r\n                </Col>\r\n                <Col size=\"md-4\">\r\n                    <strong className=\"float-left\"><Counter topCount={props.topCount} count={props.count}/></strong>\r\n                </Col>\r\n                <Col size=\"md-4\">\r\n                </Col>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\nimport { Container, Row } from './components/Grid';\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\";\nimport characters from \"./characters.json\";\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: characters,\n      count: 0,\n      topCount: 0,\n    };\n    this.checkIfClicked = this.checkIfClicked.bind(this);\n  }\n\n\n  checkIfClicked(id) {\n    let clickedCard = this.state.characters.filter(character => character.id === id)[0];\n    let charsCopy =  this.state.characters.slice().sort(function(a, b){return 0.5 - Math.random()});\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      charsCopy[charsCopy.findIndex(char => char.id === id)] = clickedCard;\n\n      this.setState({\n        characters: charsCopy,\n        count: this.state.count + 1,\n        topCount: (this.state.count + 1 > this.state.topCount ? this.state.count + 1 : this.state.topCount)\n      });\n    } else {\n      let resetChars = this.state.characters.map(char => {\n        return {\n          id: char.id,\n          image: char.image,\n          clicked: false\n        }\n      });\n      this.setState({\n        characters: resetChars,\n        count: 0,\n      })\n    }\n    }\n\n  render() {\n    return (\n      <div>\n        <Nav count={this.state.count} topCount={this.state.topCount} />\n        <Container>\n          <Row>\n            {this.state.characters.map(character => (\n              <Card\n                checkIfClicked={this.checkIfClicked}\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n              />\n            ))}\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}